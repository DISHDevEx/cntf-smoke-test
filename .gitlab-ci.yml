stages:
  - subscribe
  - deploy
  - test
  - update_tests
  - cleanup


ue_populate_random:
  allow_failure: true
  stage: subscribe
  image: ubuntu:latest
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment: 
    name: open5gs_cluster
  artifacts:
    paths:
      - IMSI_ID
  before_script:
  # Install dependencies and connect to cluster
    - apt-get update && apt-get install -y curl unzip
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
  script:
# Generate random 10-digit number for IMSI
    - digits=10
    - a=$(date +%s)
    - b=$((a*RANDOM))
    - >
      while [ ${#b} -lt 12 ]; do
        b="${b}$RANDOM"
      done
    - IMSI_ID=$(echo "${b:0:digits}")
    - printf $IMSI_ID
# exec into populate pod and create UE subscription with that number
    - POPULATE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l app.kubernetes.io/component=populate)
    # - kubectl -n openverso exec $POPULATE_POD --  open5gs-dbctl add_ue_with_slice ${CI_PIPELINE_ID} 465B5CE8B199B49FAA5F0A2EE238A6BC E8ED289DEBA952E4283B54E88E6183CA internet 1 111111
    # Here you are capturing the time it takes to populate the database with a new IMSI_ID and storing it in the "time_to_populate_database.txt" file
    - >
       { time -p kubectl -n openverso exec $POPULATE_POD -- open5gs-dbctl add_ue_with_slice ${CI_PIPELINE_ID} 465B5CE8B199B49FAA5F0A2EE238A6BC E8ED289DEBA952E4283B54E88E6183CA internet 1 111111; } 2>&1 | grep real | awk '{print "creation_time_db: " $2}' >> time_to_populate_database.txt
# write the IMSI_ID as an artifact to be used in later jobs
    - echo $IMSI_ID > IMSI_ID


#Job that runs ueransim using that subscriber ID and executes script


# deploy test-ue:
#   image:
#     name: alpine/helm
#     entrypoint: [""]
#   stage: deploy
#   needs:
#     - job: ue_populate_random
#       artifacts: true
#   variables:
#     REGION: us-east-1
#     CLUSTER_NAME: cntf-open5gs-cluster
#   artifacts: 
#     paths: 
#       - IMSI_ID 
#   environment:
#     name: open5gs_cluster 
#   script: 
#     - apk add --no-cache python3 py3-pip jq
#     - pip3 install --upgrade pip 
#     - pip3 install --no-cache-dir awscli
#     - aws --version
#     - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
#     - chmod +x kubectl
#     - mv kubectl /usr/local/bin/
#     - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
#     - helm repo add openverso https://gradiant.github.io/openverso-charts/
# # source IMSI_ID value
#     - IMSI_ID=$(cat IMSI_ID)
#     - >
#       COMMON_LABEL=$(jq -n --arg CI_PIPELINE_ID "$CI_PIPELINE_ID" '{"gitlab-pipeline": $CI_PIPELINE_ID}')
#     - >
#       helm template -n openverso ueransim-gnb  openverso/ueransim-ues \
#         --set ues.initialMSISDN="${IMSI_ID}"   \
#         --set-json commonLabels="${COMMON_LABEL}" \
#         --values cntf_gnb_ues_values.yaml
#     - > 
#       helm -n openverso upgrade --install ueransim-gnb  openverso/ueransim-ues \
#         --set ues.initialMSISDN="${IMSI_ID}"   \
#         --set-json commonLabels="${COMMON_LABEL}" \
#         --values cntf_gnb_ues_values.yaml
   

smoke_test_scheduled:
  image: ubuntu:latest
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  needs:
    - job: deploy test-ue
    - job: ue_populate_random
      artifacts: true
  stage: test
  environment:
    name: open5gs_cluster
  artifacts:
    paths:
      - over5g.json
      - overinternet.json 
  script:
    - apt update
    - apt install -y python3
    - python3 --version 
    - apt-get update && apt-get install -y curl unzip
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
    - UE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l pod-template-hash=697554b858) 
    - kubectl -n openverso cp ./ueransim_smoke_test.sh $UE_POD:/tmp/ueransim_smoke_test.sh
    - kubectl -n openverso exec $UE_POD -- bash -c "/tmp/ueransim_smoke_test.sh >&1"
    

update_test_results:
  allow_failure: true
  image:
    name: alpine/helm
    entrypoint: [""]
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  stage: update_tests
  script:
    - apk add --no-cache python3 py3-pip jq
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - pip3 install --no-cache-dir boto3  
    - aws --version
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
    - python3 ./s3_test_results_coralogix.py # converts over5g.json & overinternet.json files into objects in an S3 bucket
    - sh ./update_test_results.sh # continuously updates new local test data and S3


# Job that removes subscriber from the network


cleanup:
  image:
    name: alpine/helm
    entrypoint: [""]
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  needs:
    - job: smoke_test_scheduled
    - job: ue_populate_random
      artifacts: true
  stage: cleanup
  environment:
    name: open5gs_cluster
  script:
    - apk add --no-cache python3 py3-pip 
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - aws --version
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
# remove smoke-test helm release
    - helm -n openverso uninstall ueransim-ues-smoke-test
# delete test IMSI from subscriber database
    - IMSI_ID=$(cat IMSI_ID)
    - printf $IMSI_ID
    - POPULATE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l app.kubernetes.io/component=populate)
    - kubectl -n openverso exec $POPULATE_POD --  open5gs-dbctl remove ${IMSI_ID}
  rules:
    - when: always



    

